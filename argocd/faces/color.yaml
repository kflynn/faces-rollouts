---
apiVersion: v1
kind: Service
metadata:
  name: color
  namespace: faces
spec:
  type: ClusterIP
  selector:
    service: color
  ports:
  - port: 80
    targetPort: http
---
apiVersion: v1
kind: Service
metadata:
  name: color-canary
  namespace: faces
spec:
  ports:
    - port: 80
      targetPort: http
  selector:
    service: color
---
apiVersion: v1
kind: Service
metadata:
  name: color-stable
  namespace: faces
spec:
  ports:
    - port: 80
      targetPort: http
  selector:
    service: color
---
apiVersion: gateway.networking.k8s.io/v1beta1
kind: HTTPRoute
metadata:
  name: color-route
  namespace: faces
spec:
  parentRefs:
    - name: color
      kind: Service
      group: ""
      port: 80
  rules:
    - backendRefs:
        - name: color-stable
          group: ""
          port: 80
          kind: Service
        - name: color-canary
          group: ""
          port: 80
          kind: Service
---
apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: color-rollout
  namespace: faces
spec:
  replicas: 1
  strategy:
    canary:
      canaryService: color-canary
      stableService: color-stable
      trafficRouting:
        plugins:
          argoproj-labs/gatewayAPI:
            httpRoute: color-route # our created httproute
            namespace: faces
      steps:
        - setWeight: 30
        - pause: {}
        - setWeight: 40
        - pause: { duration: 15 }
        - setWeight: 60
        - pause: { duration: 15 }
        - setWeight: 80
        - pause: { duration: 15 }
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      service: color
  template:
    metadata:
      labels:
        service: color
    spec:
      containers:
      - name: color
        image: ghcr.io/buoyantio/faces-workload:1.5.0
        ports:
        - containerPort: 8000
          name: http
        env:
        - name: FACES_SERVICE
          value: "color"
        # - name: COLOR
        #   value: "blue"
        - name: DELAY_BUCKETS
          value: "0,5,10,15,20,50,200,500,750"
        readinessProbe:
          httpGet:
            path: /
            port: 8000
          initialDelaySeconds: 1
          periodSeconds: 1
        resources:
          requests:
            cpu: 100m
            memory: 64Mi
          limits:
            cpu: 250m
            memory: 128Mi
